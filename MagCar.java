/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SubangsCarRental;

/**
 *
 * @author User
 */
import javax.swing.JOptionPane;
import java.io.IOException;
import java.io.FileReader;
import java.io.BufferedReader;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import java.io.FileWriter;
public class MagCar extends javax.swing.JFrame {

    /**
     * Creates new form MagCar1
     */
    public MagCar() {
        initComponents();
        inition();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        private void inition() {
    // Other initialization code
    
    // Initially disable editing components
    disableEditingComponents();
    // Initially disable buttons
    disableButtons();
    
    // Add action listener to the Edit button
    editButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            enableEditingComponents(); // Enable editing components when Edit button is clicked
            savaButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
    });

    // Add action listener to the Save (After Edit) button
    savaButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            // Check if all required fields are filled
            if (areAllFieldsFilled()) {
                // Save changes and disable editing components
                saveChanges();
                disableEditingComponents();
                deleteButton.setEnabled(false);
                savaButton.setEnabled(false);
            } else {
                // Enable editing components if not all fields are filled
                enableEditingComponents();
                JOptionPane.showMessageDialog(MagCar.this, "Please fill in all required fields!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // Add action listener to the Automatic radio button
    Auto.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            // Deselect the Manual radio button
            Mannual.setSelected(false);
        }
    });

    // Add action listener to the Manual radio button
    Mannual.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            // Deselect the Automatic radio button
            Auto.setSelected(false);
        }
    });
}
    
// Method to check if all required fields are filled
private boolean areAllFieldsFilled() {
    return !CarModel.getText().isEmpty() &&
           NumSeats.getSelectedItem() != null &&
           CarColor.getSelectedItem() != null &&
           Price.getSelectedItem() != null &&
           carStatus.getSelectedItem() != null &&
           (Auto.isSelected() || Mannual.isSelected()); // Check gearbox selection
}

    
    private void disableButtons() {
        editButton.setEnabled(false);
        savaButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }

    // Method to disable editing components
    private void disableEditingComponents() {
        CarModel.setEditable(false);
        CarType.setEnabled(false);
        NumSeats.setEnabled(false);
        CarColor.setEnabled(false);
        Auto.setEnabled(false);
        Mannual.setEnabled(false);
        Price.setEnabled(false);
        carStatus.setEnabled(false);
        ReverseCamera.setEnabled(false);
        gpsFeature2.setEnabled(false);
        bluetoothFeature3.setEnabled(false);
        airbagFeature4.setEnabled(false);
        sunroofFeature5.setEnabled(false);
    }

    // Method to enable editing components
    private void enableEditingComponents() {
        CarModel.setEditable(true);
        CarType.setEnabled(true);
        NumSeats.setEnabled(true);
        CarColor.setEnabled(true);
        Auto.setEnabled(true);
        Mannual.setEnabled(true);
        Price.setEnabled(true);
        carStatus.setEnabled(true);
        ReverseCamera.setEnabled(true);
        gpsFeature2.setEnabled(true);
        bluetoothFeature3.setEnabled(true);
        airbagFeature4.setEnabled(true);
        sunroofFeature5.setEnabled(true);
    }
    
     // Method to reset the state of components
    private void resetComponents() {
        // Set text fields to null
        CarModel.setText(null);
        // Reset combo boxes
        CarType.setSelectedIndex(-1);
        NumSeats.setSelectedIndex(-1);
        CarColor.setSelectedIndex(-1);
        Price.setSelectedIndex(-1);
        carStatus.setSelectedIndex(-1);
        // Deselect radio buttons
        Auto.setSelected(false);
        Mannual.setSelected(false);
        // Deselect checkboxes
        ReverseCamera.setSelected(false);
        gpsFeature2.setSelected(false);
        bluetoothFeature3.setSelected(false);
        airbagFeature4.setSelected(false);
        sunroofFeature5.setSelected(false);
        disableButtons();
        disableEditingComponents();
    }
    private void saveChanges() {    
    // Get the car ID entered by the user for searching
        String carIdToSearch = search.getText().trim();

        // Define a StringBuilder to store the modified lines
        StringBuilder modifiedContent = new StringBuilder();

        // Define a boolean flag to track if the car ID is found
        boolean found = false;

        // Define a FileReader and BufferedReader to read from the file
        try (FileReader fileReader = new FileReader("car_info.txt");
             BufferedReader bufferedReader = new BufferedReader(fileReader)) {

            String line;

            // Loop through each line in the file
            while ((line = bufferedReader.readLine()) != null) {
                // Split the line by ","
                String[] parts = line.split(",");

                // Check if the first part of the line is the car ID
                if (parts.length > 0 && parts[0].trim().equals(carIdToSearch)) {
                    found = true; // Car ID found
                    // Update car information
                    modifiedContent.append(carIdToSearch).append(","); // Append the car ID

                    // Update car attributes
                    modifiedContent.append(CarModel.getText()).append(","); // Model
                    modifiedContent.append(CarType.getSelectedItem()).append(","); // Type
                    modifiedContent.append(NumSeats.getSelectedItem()).append(","); // Number of Passengers
                    modifiedContent.append(CarColor.getSelectedItem()).append(","); // Color

                    // Update gearbox
                    modifiedContent.append(Auto.isSelected() ? "Automatic" : "Manual").append(",");

                    // Update price
                    modifiedContent.append(Price.getSelectedItem()).append(",");
                    
                    //Update status
                    modifiedContent.append(carStatus.getSelectedItem()).append(",");
                    
                    // Update features
                    modifiedContent.append(ReverseCamera.isSelected() ? "Reverse backup camera," : "");
                    modifiedContent.append(gpsFeature2.isSelected() ? "GPS," : "");
                    modifiedContent.append(bluetoothFeature3.isSelected() ? "Bluetooth," : "");
                    modifiedContent.append(airbagFeature4.isSelected() ? "Air Bags," : "");
                    modifiedContent.append(sunroofFeature5.isSelected() ? "Sunroof," : "");

                    // Remove the trailing comma and append a new line
                    modifiedContent.deleteCharAt(modifiedContent.length() - 1);
                    modifiedContent.append("\n");
                } else {
                    // If the line doesn't contain the searched ID, append it as it is
                    modifiedContent.append(line).append("\n");
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error reading file!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if an error occurs
        }

        // If car ID not found, display an error message
        if (!found) {
            JOptionPane.showMessageDialog(this, "Car ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if car ID is not found
        }

        // Write the modified content back to the file
        try (FileWriter fileWriter = new FileWriter("car_info.txt")) {
            fileWriter.write(modifiedContent.toString());
            JOptionPane.showMessageDialog(this, "Car information updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error writing to file!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        Price = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        Mannual = new javax.swing.JRadioButton();
        Auto = new javax.swing.JRadioButton();
        CarColor = new javax.swing.JComboBox<>();
        NumSeats = new javax.swing.JComboBox<>();
        CarType = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        CarModel = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        savaButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        sunroofFeature5 = new javax.swing.JCheckBox();
        airbagFeature4 = new javax.swing.JCheckBox();
        bluetoothFeature3 = new javax.swing.JCheckBox();
        gpsFeature2 = new javax.swing.JCheckBox();
        ReverseCamera = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        carStatus = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Manage Car");

        backButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        backButton.setText("Menu");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addGap(38, 38, 38))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backButton)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Price.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Price.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "75", "100", "150", "200", "250", "300", "350", "400", "450", "500" }));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Price /day:");

        Mannual.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Mannual.setText("Manual");
        Mannual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MannualActionPerformed(evt);
            }
        });

        Auto.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Auto.setText("Automatic");

        CarColor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CarColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Black", "White", "Gray", "Red", "Yellow", "Green", "Blue" }));

        NumSeats.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        NumSeats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        NumSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumSeatsActionPerformed(evt);
            }
        });

        CarType.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CarType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sedans", "SUVs", "Trucks", "Hatchbacks", "Coupes", "Vans/Minivans", "Compact Cars", "Luxury Cars" }));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Gearbox: ");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Car Color: ");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Number of Seats:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Car Type:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Features:");

        CarModel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CarModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarModelActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Car Model: ");

        savaButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        savaButton.setText("Save (After Edit)");
        savaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savaButtonActionPerformed(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        search.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        sunroofFeature5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        sunroofFeature5.setText("Sunroof");

        airbagFeature4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        airbagFeature4.setText("Air bags");
        airbagFeature4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airbagFeature4ActionPerformed(evt);
            }
        });

        bluetoothFeature3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        bluetoothFeature3.setText("Bluetooth");
        bluetoothFeature3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bluetoothFeature3ActionPerformed(evt);
            }
        });

        gpsFeature2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        gpsFeature2.setText("GPS");

        ReverseCamera.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ReverseCamera.setText("Reverse Backup Camera");
        ReverseCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReverseCameraActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Car  Status: ");

        carStatus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        carStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Under Maintenance" }));
        carStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(searchButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addGap(64, 64, 64)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(CarModel)
                                            .addComponent(CarType, 0, 181, Short.MAX_VALUE))))
                                .addGap(54, 54, 54))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Auto)
                                            .addComponent(Mannual))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(NumSeats, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(73, 73, 73))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(carStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CarColor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ReverseCamera)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8)
                            .addComponent(gpsFeature2)
                            .addComponent(bluetoothFeature3)
                            .addComponent(airbagFeature4)
                            .addComponent(sunroofFeature5))
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(savaButton)
                        .addGap(12, 12, 12)
                        .addComponent(deleteButton)
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchButton)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReverseCamera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gpsFeature2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bluetoothFeature3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(airbagFeature4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sunroofFeature5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editButton)
                            .addComponent(deleteButton)
                            .addComponent(savaButton))
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(CarModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(CarType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(NumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(CarColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(Auto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Mannual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(carStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MannualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MannualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MannualActionPerformed

    private void NumSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumSeatsActionPerformed

    private void CarModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CarModelActionPerformed

    private void savaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savaButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savaButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
    // Read the car ID entered in the search field
    String carIdToSearch = search.getText().trim();
    
    // Define a FileReader and BufferedReader to read from the file
    try (FileReader fileReader = new FileReader("car_info.txt");
         BufferedReader bufferedReader = new BufferedReader(fileReader)) {
        
        String line;
        boolean found = false;
        
        // Loop through each line in the file
        while ((line = bufferedReader.readLine()) != null) {
            // Split the line by ","
            String[] parts = line.split(",");
            
            // Check if the first part of the line is "Car ID"
            if (parts.length > 1 && parts[0].trim().equals(carIdToSearch)) {

                    // Extract the values from the remaining parts of the line
                    String model = parts[1].trim();
                    String type = parts[2].trim();
                    String numPassengers = parts[3].trim();
                    String color = parts[4].trim();
                    String gearbox = parts[5].trim();
                    String price = parts[6].trim();
                    String status = parts[7].trim();
                    // Set the values to the corresponding text fields and components
                    CarModel.setText(model);
                    CarType.setSelectedItem(type);
                    NumSeats.setSelectedItem(numPassengers);
                    CarColor.setSelectedItem(color);
                    carStatus.setSelectedItem(status);
                    
                    // Set the gearbox radio buttons
                    if (gearbox.equals("Automatic")) {
                        Auto.setSelected(true);
                        Mannual.setSelected(false);
                    } else if (gearbox.equals("Manual")) {
                        Mannual.setSelected(true);
                        Auto.setSelected(false);
                    }
                    
                    Price.setSelectedItem(price);
                    
                    ReverseCamera.setSelected(false);
                    gpsFeature2.setSelected(false);
                    bluetoothFeature3.setSelected(false);
                    airbagFeature4.setSelected(false);
                    sunroofFeature5.setSelected(false);
                    for (int i = 8; i < parts.length; i++) {
                    String feature = parts[i].trim();
                    switch (feature) {
                        case "GPS":
                            gpsFeature2.setSelected(true);
                            break;
                        case "Sunroof":
                            sunroofFeature5.setSelected(true);
                            break;
                        case "Air Bags":
                            airbagFeature4.setSelected(true);
                            break;
                        case "Bluetooth":
                            bluetoothFeature3.setSelected(true);
                            break;
                        case "Reverse backup camera":
                            ReverseCamera.setSelected(true);
                            break;
                        // Add cases for other features if needed
                        default:
                            // Handle unrecognized features
                            break;
                                }
                            }
                            // Set found flag to true
                            found = true;
                            break; // Exit the loop once found
                    }
                }

        // If car ID not found, display an error message
        if (!found) {
            JOptionPane.showMessageDialog(this, "Car Plate Number not found!", "Error", JOptionPane.ERROR_MESSAGE);
            savaButton.setEnabled(false);
            deleteButton.setEnabled(false);
            editButton.setEnabled(false);
        } else {
            // If car ID found, enable the Save and Delete buttons
            editButton.setEnabled(true);
        }
    } catch (IOException ex) {
        // Handle IOException
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error reading file!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
    // Read the car ID entered in the search field
    String carIdToDelete = search.getText().trim();

    // Display a confirmation dialog before deleting
    int dialogResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the record with Car ID: " + carIdToDelete + "?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    if (dialogResult != JOptionPane.YES_OPTION) {
        return; // Exit the method if user cancels the deletion
    }

    // Define a StringBuilder to store the remaining content
    StringBuilder remainingContent = new StringBuilder();

    // Define a boolean flag to track if the car ID is found
    boolean found = false;

    // Define a FileReader and BufferedReader to read from the file
    try (FileReader fileReader = new FileReader("car_info.txt");
         BufferedReader bufferedReader = new BufferedReader(fileReader)) {

        String line;

        // Loop through each line in the file
        while ((line = bufferedReader.readLine()) != null) {
            // Split the line by ","
            String[] parts = line.split(",");

            // Check if the first part of the line is the car ID
            if (parts.length > 0 && parts[0].trim().equals(carIdToDelete)) {
                found = true; // Car ID found, mark as found
            } else {
                // If car ID is not found, append the line to the remaining content
                remainingContent.append(line).append("\n");
            }
        }
    } catch (IOException ex) {
        // Handle IOException
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error reading file!", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if an error occurs
    }

    // If car ID not found, display an error message
    if (!found) {
        JOptionPane.showMessageDialog(this, "Car ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if car ID is not found
    }

    // Write the remaining content back to the file
    try (FileWriter fileWriter = new FileWriter("car_info.txt")) {
        fileWriter.write(remainingContent.toString());
        JOptionPane.showMessageDialog(this, "Car information deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        // Clear search field and disable buttons after successful deletion
        search.setText("");
        resetComponents();
    } catch (IOException ex) {
        // Handle IOException
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error writing to file!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
    // Create an instance of the register_newcar frame
    AdminMenu AdmenuFrame = new AdminMenu();
    // Set the frame visible
    AdmenuFrame.setVisible(true);
    // Close the current frame (Admin_Menu frame)
    dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void airbagFeature4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airbagFeature4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_airbagFeature4ActionPerformed

    private void bluetoothFeature3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bluetoothFeature3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bluetoothFeature3ActionPerformed

    private void ReverseCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReverseCameraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReverseCameraActionPerformed

    private void carStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_carStatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MagCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MagCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MagCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MagCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MagCar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Auto;
    private javax.swing.JComboBox<String> CarColor;
    private javax.swing.JTextField CarModel;
    private javax.swing.JComboBox<String> CarType;
    private javax.swing.JRadioButton Mannual;
    private javax.swing.JComboBox<String> NumSeats;
    private javax.swing.JComboBox<String> Price;
    private javax.swing.JCheckBox ReverseCamera;
    private javax.swing.JCheckBox airbagFeature4;
    private javax.swing.JButton backButton;
    private javax.swing.JCheckBox bluetoothFeature3;
    private javax.swing.JComboBox<String> carStatus;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JCheckBox gpsFeature2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton savaButton;
    private javax.swing.JTextField search;
    private javax.swing.JButton searchButton;
    private javax.swing.JCheckBox sunroofFeature5;
    // End of variables declaration//GEN-END:variables
}
