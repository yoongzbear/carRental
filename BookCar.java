/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SubangsCarRental;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import java.time.format.DateTimeParseException;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;




/**
 *
 * @author User
 */

public class BookCar extends javax.swing.JFrame {
    private final String email;
    /**
     * Creates new form BookCar
     */
    public BookCar() {
        initComponents();
            this.email = SessionManager.getEmail();
            // Disable text fields initially
            Model.setEditable(false);
            Type.setEditable(false);
            NumSeats.setEditable(false);
            Gear.setEditable(false);
            carColor.setEditable(false);
            Price.setEditable(false);
            Features.setEditable(false);    
       addPlaceholderListeners();
       populatePassengerComboBox();
    }
 
    private void populatePassengerComboBox() {
        Set<Integer> passengerSet = new HashSet<>(); // Use a set to store unique passenger numbers

        // Read the car information from car_info.txt and extract passenger numbers
        try (BufferedReader reader = new BufferedReader(new FileReader("car_info.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 4 && !parts[3].trim().isEmpty()) { // Ensure the line has the passenger number
                    int numSeats = Integer.parseInt(parts[3].trim());
                    passengerSet.add(numSeats); // Add the passenger number to the set
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Convert the set of passenger numbers to an array and sort it
        Integer[] passengerArray = passengerSet.toArray(new Integer[0]);
        Arrays.sort(passengerArray);

        // Populate the combo box with passenger numbers
        numPassengers.removeAllItems(); // Clear existing items
        for (Integer numSeats : passengerArray) {
            numPassengers.addItem(numSeats.toString());
        }
    }    
    // Add focus listeners for placeholder functionality
    private void addPlaceholderListeners() {
        useDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (useDate.getText().equals("DD/MM/YYYY")) {
                    useDate.setText("");
                    useDate.setForeground(Color.BLACK); // Change font color to black
                }
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (useDate.getText().isEmpty()) {
                    useDate.setText("DD/MM/YYYY");
                    useDate.setForeground(new Color(204, 204, 204)); // Change font color to gray
                }
            }
        });
        returnDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (returnDate.getText().equals("DD/MM/YYYY")) {
                    returnDate.setText("");
                    returnDate.setForeground(Color.BLACK); // Change font color to black
                }
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (returnDate.getText().isEmpty()) {
                    returnDate.setText("DD/MM/YYYY");
                    returnDate.setForeground(new Color(204, 204, 204)); // Change font color to gray
                }
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Model = new javax.swing.JTextField();
        Type = new javax.swing.JTextField();
        NumSeats = new javax.swing.JTextField();
        Gear = new javax.swing.JTextField();
        carColor = new javax.swing.JTextField();
        Price = new javax.swing.JTextField();
        Features = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        useDate = new javax.swing.JTextField();
        returnDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        numPassengers = new javax.swing.JComboBox<>();
        search = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        totalfee = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        Previous = new javax.swing.JButton();
        book = new javax.swing.JButton();
        Next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Car Model: ");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Car Type:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Number of Seats:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Car Color:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Gearbox:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Price/day:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Features:");

        Model.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        Model.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModelActionPerformed(evt);
            }
        });

        Type.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        NumSeats.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        NumSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumSeatsActionPerformed(evt);
            }
        });

        Gear.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        carColor.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        Price.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        Price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceActionPerformed(evt);
            }
        });

        Features.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setForeground(new java.awt.Color(204, 255, 153));

        jPanel2.setBackground(new java.awt.Color(51, 102, 255));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel11.setText("Book Car");

        back.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        back.setText("Menu");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(253, 253, 253)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(back)
                    .addComponent(jLabel11))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Number of passengers:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Use date:");

        useDate.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        useDate.setForeground(new java.awt.Color(204, 204, 204));
        useDate.setText("DD/MM/YYYY");
        useDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDateActionPerformed(evt);
            }
        });

        returnDate.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        returnDate.setForeground(new java.awt.Color(204, 204, 204));
        returnDate.setText("DD/MM/YYYY");
        returnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnDateActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Return Date:");

        numPassengers.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        numPassengers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        numPassengers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numPassengersActionPerformed(evt);
            }
        });

        search.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search)
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(numPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(useDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(returnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel12.setText("Total fee:");

        totalfee.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        totalfee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalfeeActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(51, 102, 255));

        Previous.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        Previous.setText("<<");
        Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousActionPerformed(evt);
            }
        });

        book.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        book.setText("Book");
        book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookActionPerformed(evt);
            }
        });

        Next.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        Next.setText(">>");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(Previous)
                .addGap(194, 194, 194)
                .addComponent(book, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Next)
                .addGap(61, 61, 61))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Next)
                    .addComponent(Previous)
                    .addComponent(book))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Model)
                                    .addComponent(Type)
                                    .addComponent(NumSeats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(28, 28, 28)
                                        .addComponent(Gear, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(carColor, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(Features, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(37, 37, 37)
                                .addComponent(totalfee, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Model, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(Gear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel2))
                    .addComponent(carColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel6))
                    .addComponent(NumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(Features, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(totalfee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ModelActionPerformed

    private void NumSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumSeatsActionPerformed

    private void PriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PriceActionPerformed

    private void returnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnDateActionPerformed

    private void numPassengersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPassengersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numPassengersActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
    // Check if use date is filled
    if (useDate.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a use date.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Check if return date is filled
    if (returnDate.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a return date.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Check if use date is the same as the return date and they are not placeholders
    if (useDate.getText().equals(returnDate.getText()) && !useDate.getText().equals("DD/MM/YYYY") && !returnDate.getText().equals("DD/MM/YYYY")) {
        JOptionPane.showMessageDialog(this, "The use date cannot be the same as the return date!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // After ensuring both use date and return date are filled, proceed with the rest of the logic
    String useDateText = useDate.getText().trim();
    LocalDate useDateValue;

    try {
        useDateValue = LocalDate.parse(useDateText, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
    } catch (DateTimeParseException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid use date following the format 'DD/MM/YYYY'.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate return date
    String returnDateText = returnDate.getText().trim();
    LocalDate returnDateValue;

    try {
        returnDateValue = LocalDate.parse(returnDateText, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
    } catch (DateTimeParseException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid return date following the format 'DD/MM/YYYY'.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate use date
    if (!validateDate(useDateText, useDateValue)) {
        return;
    }

    // Validate return date
    if (!validateDate(returnDate.getText().trim(), LocalDate.parse(useDate.getText().trim(), DateTimeFormatter.ofPattern("dd/MM/yyyy")))) {
        return;
    }
    
    // Get the number of passengers entered by the user
        int passengers = Integer.parseInt(numPassengers.getSelectedItem().toString());

        // Read the specified dates
        LocalDate useDate = parseDate(this.useDate.getText());
        LocalDate returnDate = parseDate(this.returnDate.getText());

        // Read the car information from car_info.txt
        availableCarsFiltered  = getCarsWithMatchingSeatsAndAvailability(passengers, useDate, returnDate);

        // Display available cars
        displayAvailableCars(availableCarsFiltered, currentIndex);
        
        // Calculate the number of days between use date and return date
        long numberOfDays = ChronoUnit.DAYS.between(useDate, returnDate);

        // Calculate total fee
        double totalFee = Double.parseDouble(Price.getText()) * numberOfDays;

        // Set the total fee to the text field
        totalfee.setText(String.valueOf("RM"+totalFee));
        
    }
    
    private boolean validateDate(String dateText, LocalDate useDate) {
        String datePattern = "^(0[1-9]|[1-2][0-9]|3[0-1])/(0[1-9]|1[0-2])/\\d{4}$";

        if (dateText.matches(datePattern)) {
            String[] parts = dateText.split("/");
            int day = Integer.parseInt(parts[0]);
            int month = Integer.parseInt(parts[1]);
            int year = Integer.parseInt(parts[2]);

            // Check if the date is in the past
            LocalDate currentDate = LocalDate.now();
            LocalDate inputDate = LocalDate.of(year, month, day);

            if (inputDate.isBefore(currentDate)) {
                JOptionPane.showMessageDialog(this, "Please enter a future date.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            if (inputDate.isBefore(useDate)) {
                JOptionPane.showMessageDialog(this, "Return date cannot be before use date.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a valid date following the format 'DD/MM/YYYY'.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    private int currentIndex = 0;
    
    private LocalDate parseDate(String dateString) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        return LocalDate.parse(dateString, formatter);
    }

    private List<Car> getCarsWithMatchingSeatsAndAvailability(int passengers, LocalDate useDate, LocalDate returnDate) {
        List<Car> availableCars = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("car_info.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 7) { // Ensure the line has at least 7 parts
                    Car car = new Car();
                    car.setId(parts[0].trim());
                    car.setModel(parts[1].trim());
                    car.setType(parts[2].trim());
                    car.setNumSeats(Integer.parseInt(parts[3].trim()));
                    car.setColor(parts[4].trim());
                    car.setGearbox(parts[5].trim());
                    car.setPricePerDay(Double.parseDouble(parts[6].trim()));
                    if (parts[7].trim().equals("Under Maintenance")){
                         continue;
                    }
                    // Features start from index 7
                    StringBuilder features = new StringBuilder();
                    for (int i = 8; i < parts.length; i++) {
                        features.append(parts[i].trim()).append(", ");
                    }
                    if (features.length() > 0) {
                        features.setLength(features.length() - 2); // Remove the last comma and space
                    }
                    car.setFeatures(features.toString());
                    // Check availability
                    if (car.getNumSeats() == passengers && isCarAvailable(car.getId(), useDate, returnDate)) {
                        availableCars.add(car);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return availableCars;
    }

    private boolean isCarAvailable(String carId, LocalDate useDate, LocalDate returnDate) {
        try (BufferedReader reader = new BufferedReader(new FileReader("cus_book_car.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length != 9) {
                    continue;
                }
                if (parts[2].trim().equals(carId)) {
                    LocalDate bookedUseDate = parseDate(parts[6].trim());
                    LocalDate bookedReturnDate = parseDate(parts[7].trim());

                    // Check if the car is booked during the specified period
                    boolean overlap = useDate.isBefore(bookedReturnDate) && bookedUseDate.isBefore(returnDate);

                    // If the car is booked during the specified period, return false
                    if (overlap) {
                        return false;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    private String selectedCarId;
    private void displayAvailableCars(List<Car> cars, int index) {
        if (cars == null || cars.isEmpty() || index >= cars.size()) {
            JOptionPane.showMessageDialog(this, "No cars available for the specified dates and number of passengers.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Car car = cars.get(index); 
        Model.setText(car.getModel());
        Type.setText(car.getType());
        NumSeats.setText(String.valueOf(car.getNumSeats()));
        Gear.setText(car.getGearbox());
        carColor.setText(car.getColor());
        Price.setText(String.valueOf(car.getPricePerDay()));
        Features.setText(car.getFeatures());
        
        
        // Calculate total fee using booking class
        LocalDate useDate = parseDate(this.useDate.getText());
        LocalDate returnDate = parseDate(this.returnDate.getText());

        double totalFee = booking.calculateTotalFee(useDate, returnDate, car.getPricePerDay());

        // Set the total fee to the text field
        totalfee.setText("RM" + totalFee);
        
        // Set features text, or "None" if features are not available
        String featuresText = car.getFeatures().isEmpty() ? "None" : car.getFeatures();
        Features.setText(featuresText);

        // Disable user input for text fields
        Model.setEditable(false);
        Type.setEditable(false);
        NumSeats.setEditable(false);
        Gear.setEditable(false);
        carColor.setEditable(false);
        Price.setEditable(false);
        Features.setEditable(false);
        totalfee.setEditable(false);
        // Set the selected car ID
        selectedCarId = car.getId();
    }//GEN-LAST:event_searchActionPerformed

    private List<Car> availableCarsFiltered;
    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
    // Check if other required fields are filled
    if (useDate.getText().trim().isEmpty() || useDate.getText().equals("DD/MM/YYYY")||useDate.getText().trim().isEmpty() || useDate.getText().equals("DD/MM/YYYY")||Model.getText().trim().isEmpty() || Type.getText().trim().isEmpty() || carColor.getText().trim().isEmpty() || Price.getText().trim().isEmpty() || numPassengers.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    currentIndex++; // Increment the current index

    // Check if the index exceeds the size of available cars
    if (currentIndex >= availableCarsFiltered.size()) {
        currentIndex = 0; // Wrap around to the beginning if it does
        JOptionPane.showMessageDialog(this, "This is the last available car", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
    }

    // Display the car information at the updated index
    displayAvailableCars(availableCarsFiltered, currentIndex);

    }//GEN-LAST:event_NextActionPerformed

    private void PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousActionPerformed
    // Check if other required fields are filled
    if (useDate.getText().trim().isEmpty() || useDate.getText().equals("DD/MM/YYYY")||useDate.getText().trim().isEmpty() || useDate.getText().equals("DD/MM/YYYY")||Model.getText().trim().isEmpty() || Type.getText().trim().isEmpty() || carColor.getText().trim().isEmpty() || Price.getText().trim().isEmpty() || numPassengers.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    currentIndex--; // Decrement the current index

    // Check if the index becomes less than 0
    if (currentIndex < 0) {
        // Wrap around to the end of the list
        if (availableCarsFiltered != null && !availableCarsFiltered.isEmpty()) {
            currentIndex = availableCarsFiltered.size() - 1;
        } else {
            currentIndex = 0; // Set to 0 if the list is empty or null
        }
    }

    // Display the car information at the updated index
    displayAvailableCars(availableCarsFiltered, currentIndex);
    }//GEN-LAST:event_PreviousActionPerformed
    private int getNextBookingId() {
        int maxBookingId = 0;
        try (BufferedReader reader = new BufferedReader(new FileReader("cus_book_car.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                int bookingId = Integer.parseInt(parts[0]);
                if (bookingId > maxBookingId) {
                    maxBookingId = bookingId;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return maxBookingId + 1; // Increment the maximum booking ID by 1
    }
    private void bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookActionPerformed
    // Check if other required fields are filled
    if (useDate.getText().trim().isEmpty() || useDate.getText().equals("DD/MM/YYYY")||useDate.getText().trim().isEmpty() || useDate.getText().equals("DD/MM/YYYY")||Model.getText().trim().isEmpty() || Type.getText().trim().isEmpty() || carColor.getText().trim().isEmpty() || Price.getText().trim().isEmpty() || numPassengers.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    String Email = SessionManager.getEmail();

    // Get the selected car ID
    String carId = selectedCarId;

    // Get the number of passengers
    int passengers = Integer.parseInt(numPassengers.getSelectedItem().toString());

    // Get the price per day
    double pricePerDay = availableCarsFiltered.get(currentIndex).getPricePerDay();
    String bookingStatus = "Booked";
    // Get the use date and return date
    LocalDate useDate = parseDate(this.useDate.getText());
    LocalDate returnDate = parseDate(this.returnDate.getText());
    
    String type = Type.getText();
    
    // Format the dates as "dd/mm/yyyy"
    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    String formattedUseDate = useDate.format(dateFormatter);
    String formattedReturnDate = returnDate.format(dateFormatter);

    // Calculate total price using the booking class
    double totalPrice = booking.calculateTotalFee(useDate, returnDate, pricePerDay);

    // Get the next booking ID
    int bookingId = getNextBookingId();
      
    // Write the booking details to a text file
    try (BufferedReader reader = new BufferedReader(new FileReader("cus_book_car.txt"))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] bookingDetails = line.split(",");
            if (bookingDetails.length <8) {
                continue;
            }
            LocalDate bookedUseDate = LocalDate.parse(bookingDetails[6], dateFormatter);
            LocalDate bookedReturnDate = LocalDate.parse(bookingDetails[7], dateFormatter);

            // Check if the selected car is already booked for the same date range
            if (carId.equals(bookingDetails[2]) &&
                !(returnDate.isBefore(bookedUseDate) || useDate.isAfter(bookedReturnDate))) {
                JOptionPane.showMessageDialog(this, "This car is already booked for the selected date range.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while reading booking details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    // Write the booking details to a text file
    try (BufferedWriter writer = new BufferedWriter(new FileWriter("cus_book_car.txt", true))) {
        // Format: Name/Gmail,Car ID,Number of Passengers,Price,Use Date,Return Date
        String bookingInfo = bookingId + "," +
                             Email+ "," +
                             carId + "," +
                             type + "," +
                             passengers + "," +
                             totalPrice + "," +
                             formattedUseDate + "," +
                             formattedReturnDate + "," +
                             bookingStatus;
        writer.write(bookingInfo);
        writer.newLine();
        writer.flush();
        JOptionPane.showMessageDialog(this, "Booking successful!", "Information", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while booking.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_bookActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        CusMenu Menu = new CusMenu();
        Menu.setVisible(true);
        dispose(); 
    }//GEN-LAST:event_backActionPerformed

    private void totalfeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalfeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalfeeActionPerformed

    private void useDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useDateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookCar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Features;
    private javax.swing.JTextField Gear;
    private javax.swing.JTextField Model;
    private javax.swing.JButton Next;
    private javax.swing.JTextField NumSeats;
    private javax.swing.JButton Previous;
    private javax.swing.JTextField Price;
    private javax.swing.JTextField Type;
    private javax.swing.JButton back;
    private javax.swing.JButton book;
    private javax.swing.JTextField carColor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JComboBox<String> numPassengers;
    private javax.swing.JTextField returnDate;
    private javax.swing.JButton search;
    private javax.swing.JTextField totalfee;
    private javax.swing.JTextField useDate;
    // End of variables declaration//GEN-END:variables
}
